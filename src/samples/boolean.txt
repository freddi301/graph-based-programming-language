Type
Boolean: Type
True: Boolean
False: Boolean
and = (x: Boolean, y: Boolean) => match x(
  True = y,
  False = False
)
or = (x: Boolean, y: Boolean) => match x(
  True = True,
  False = y
)
not = (x: Boolean) => match x(
  True = False,
  False = True
)
xor = (x: Boolean, y: Boolean) => match (
  (x = True, y = True) = False,
  (x = True, y = False) = True,
  (x = False, y = True) = True,
  (x = False, y = False) = False
)
nand = (x, y) => not(and(x, y))
nor = (x, y) => not(or(x, y))
xnor = (x, y) => not(xor(x, y))
DeMorgan1: Equality(not(and(a, b)), or(not(a), not(b)))
DeMorgan2: Equality(not(or(a, b)), and(not(a), not(b)))
