Boolean : Type
True : Boolean
False : Boolean

not = (x) => match x {
  True = False;
  False = True;
}

and = (x, y) => match x {
  True = y;
  False = False;
}

or = (x, y) => match x {
  True = True;
  False = y;
}

xor = (x, y) => match {
  (x = True, y = False) = False;
  (x = True, y = False) = True;
  (x = False, y = True) = True;
  (x = False, y = False) = False;
}

nand = (x, y) = not(x = and(x = x, y = y))

nor = (x, y) = not(x = or(x = x, y = y))

xnor = (x, y) = not(x = xor(x = x, y = y))

DeMorgan1 : Equality(not(x = and(x = a, y = b)), or(x = not(x = a), not(x = x))) = ???
DeMorgan2 : Equality(not(or(a, b)), and(not(a), not(b))) = ???
AndIsCommutative : Equality(and(a, b), and(b, a)) = ???
OrIsCommutative : Equality(or(a, b), or(b, a)) = ???
XorIsCommutative : Equality(xor(a, b), xor(b, a)) = ???